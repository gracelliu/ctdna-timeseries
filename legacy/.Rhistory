source('/Users/graceliu/Downloads/src/hpv_dna_functions.R')
source('/Users/graceliu/Downloads/src/summary_functions.R')
####################
# Set some options #
####################
ggthemr(
palette = 'dust'
)
panderOptions('table.style', 'rmarkdown')
panderOptions('table.split.table', 1000)
panderOptions('digits', 2)
set.seed(142)
tables <- list()
load('/Users/graceliu/Downloads/HPV_analysis_dataframes.Rdata')
# df_clinical_ctdna$surv_progression = as.character(df_clinical_ctdna$surv_progression)
# df_clinical_ctdna$surv_recurrence = as.character(df_clinical_ctdna$surv_recurrence)
# df_clinical_ctdna$surv_overall = as.character(df_clinical_ctdna$surv_overall)
# library(readr)
# write_tsv(df_clinical_ctdna,"test.tsv")
array_full_table_variables <- c(
'p16_status',
'sex',
'age_at_dx',
'ecog',
'stage_t_ajcc8',
'stage_n_ajcc8',
'stage_ajcc8',
'smoking_status',
'smoking_packyears',
'rt_regimen',
'local_failure',
'regional_failure',
'distant_failure',
'vital_status'
)
array_full_table_labels <- list(
p16_status ~ 'p16 status',
sex ~ 'Sex',
age_at_dx ~ 'Age at diagnosis',
ecog ~ 'ECOG Status',
stage_t_ajcc8 ~ 'T stage',
stage_n_ajcc8 ~ 'N stage',
stage_ajcc8 ~ 'Overall stage (AJCC8)',
smoking_status ~ 'Smoking status',
smoking_packyears ~ 'Smoking packyears',
rt_regimen ~ 'RT or CRT',
local_failure ~ 'Local Failure',
regional_failure ~ 'Regional Failure',
distant_failure ~ 'Distant Failure',
vital_status ~ 'Vital Status'
)
abridged_table_variables <- c('age_at_dx', 'sex', 'ecog', 'stage_t_ajcc8', 'stage_n_ajcc8', 'smoking_status')
array_abridged_table_labels <- list(
sex ~ 'Sex',
age_at_dx ~ 'Age at diagnosis',
ecog ~ 'ECOG Status',
stage_t_ajcc8 ~ 'T stage',
stage_n_ajcc8 ~ 'N stage',
smoking_status ~ 'Smoking status'
)
df_ctdna_clinical %>%
mutate(rt_regimen = factor(rt_regimen, levels = c('RT Alone', 'CRT', 'RT + EGFRI', 'RT+ IO'))) %>%
tbl_summary(
by = 'rt_regimen',
include = all_of(abridged_table_variables),
label = array_abridged_table_labels
)
val_max_eqd2 <- max(df_ctdna_eqd2$EQD2, na.rm=T)
val_max_hpv <- max(df_ctdna_eqd2$ctdna, na.rm=T)
p_hpvdna_vs_eqd2 <- df_ctdna_eqd2 %>%
ggplot(aes(
x = EQD2,
y = ctdna,
group = patient
)) +
geom_line(
color = 'Grey80',
alpha = 0.5
) +
geom_point(aes(
color = timepoint
)) +
scale_y_continuous(
trans = scales::pseudo_log_trans(sigma=0.1),
breaks = c(0, 10^(0:10)),
labels = c('Undetect.', sprintf("%.20g", c(10^(0:10))))
) +
scale_color_brewer(palette = 'Set1') +
labs(
x = 'RT dose (Gy, EQD2)',
y = 'HPV DNA level'
)
p_percent_undetectable_vs_eqd2 <- df_ctdna_eqd2 %>%
filter(!is.na(EQD2)) %>%
mutate(dose_bin = cut(EQD2, c(seq(0, max(EQD2, na.rm=T), 10), Inf), include.lowest=T)) %>%
group_by(dose_bin) %>%
summarise(
n_undetectable = sum(ctdna == 0),
n_total = n(),
percent_undetectable = n_undetectable / n_total * 100
) %>%
mutate(
bin_start = gsub('.(\\d+),.*', '\\1', dose_bin) %>% as.numeric,
bin_end = gsub('.\\d+,(.*)', '\\1', dose_bin) %>% substr(1, (nchar(.)-1)) %>% if_else(.=='Inf', as.character(val_max_eqd2), .) %>% as.numeric
) %>%
ggplot() +
geom_rect(aes(
xmin = bin_start,
xmax = bin_end,
ymin = 0,
ymax = percent_undetectable
), fill = '#ded076') +
geom_text(aes(
label = sprintf('%s%%', round(percent_undetectable, 1)),
x = bin_start,
y = percent_undetectable
), hjust = 0, nudge_y = 10) +
labs(
x = 'RT dose (Gy, EQD2)',
y = 'Percent undetectable'
)
plot_grid(
p_hpvdna_vs_eqd2 +
ggtitle('HPV DNA levels through RT') +
theme(
legend.position = 'none',
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid = element_blank(),
panel.background = element_blank()
),
p_percent_undetectable_vs_eqd2 +
theme(
panel.grid = element_blank(),
panel.background = element_blank()
),
ncol = 1,
align = 'v',
rel_heights = c(2,1)
)
plot_grid(
plotlist = plot_posterior_predictive_check(brms_gtv_model),
rel_widths = c(1,2)
)
plotdata_ctdna_radiomic_joint <- df_ctdna_eqd2_radiomic_clinical %>%
filter(timepoint == '3 months') %>%
filter(!is.na(sum_gtv_nodes), !is.na(gtv_primary), !is.na(ctdna)) %>%
filter(
patient %in% (df_ctdna_eqd2_radiomic_clinical %>% filter(timepoint == 'Baseline', ctdna > 0) %>% .$patient)
) %>%
mutate(
detectable = ctdna > 0,
Chemotherapy = rt_regimen == 'CRT',
`log(1+GTVp)` = log10(1+gtv_primary),
`log(1+GTVn)` = log10(1+sum_gtv_nodes),
`log(1+ctDNA)` = log10(1+ctdna)
)
# ---------------------------- #
# KM plot - split by clearance #
# ---------------------------- #
survfit_rfs_by_clearance <- survfit(
Surv(time_to_recurrence, recurrence) ~ clearance,
data = plotdata_ctdna_radiomic_joint
)
survplot_rfs_by_clearance <- ggsurvplot(
survfit_rfs_by_clearance,
risk.table = T,
legend.title="Clearance",
palette = 'jama',
risk.table.title='',
tables.col = 'strata',
pval = T
) +
labs(
x = 'Time (months)',
y = 'Recurrence-free survival'
)
# ------------------------------- #
# Cox analysis with detectability #
# ------------------------------- #
cox_detectability_stage <- coxph(
Surv(time_to_recurrence, recurrence) ~ clearance + `T category` + `N category`,
data = plotdata_ctdna_radiomic_joint %>%
mutate(
clearance = !detectable,
`T category` = as.integer(stage_t_ajcc8),
`N category` = as.integer(stage_n_ajcc8)
)
)
cox_detectability_gtv <- coxph(
Surv(time_to_recurrence, recurrence) ~ clearance + `log GTVp` + `log GTVn`,
data = plotdata_ctdna_radiomic_joint %>%
mutate(
clearance = !detectable,
`log GTVp` = log10(1 + gtv_primary),
`log GTVn` = log10(1 + sum_gtv_nodes)
)
)
p_cox_detectability <- forestmodel::forest_model(
model_list = list(cox_detectability_stage, cox_detectability_gtv),
show_global_p = 'bottom',
recalculate_width = 8
) +
geom_hline(yintercept = 4.5, size = 2, color = 'black')
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.path = 'figures/', dev=c('png', 'svg', 'pdf'))
##################
# Load Libraries #
##################
library(viridis)
library(ggsci)
library(umap)
library(zoo)
library(survival)
library(survminer)
library(lubridate)
library(gtsummary)
library(GGally)
library(ggdendro)
library(cowplot)
library(forestmodel)
library(ggthemr)
library(ggbeeswarm)
library(ggsignif)
library(glmnet)
library(pander)
Sys.setenv(CMDSTANR_NO_VER_CHECK=TRUE)
library(cmdstanr)
library(posterior)
library(brms)
library(ggrepel)
library(ggupset)
library(lme4)
library(tidyverse)
library(tidybayes)
library(ggdist)
library(ggsignif)
library(abind)
library(modelr)
library(arrow)
library(powerSurvEpi)
library(GLMMadaptive)
library(JMbayes2)
library(splines2)
library(yaml)
library(flextable)
library(rootSolve)
library(lmtest)
library(nonnestcox)
library(png)
library(grid)
library(ggridges)
source('/Users/graceliu/Downloads/src/hpv_dna_functions.R')
source('/Users/graceliu/Downloads/src/summary_functions.R')
####################
# Set some options #
####################
ggthemr(
palette = 'dust'
)
panderOptions('table.style', 'rmarkdown')
panderOptions('table.split.table', 1000)
panderOptions('digits', 2)
set.seed(142)
tables <- list()
load('/Users/graceliu/Downloads/HPV_analysis_dataframes.Rdata')
# df_clinical_ctdna$surv_progression = as.character(df_clinical_ctdna$surv_progression)
# df_clinical_ctdna$surv_recurrence = as.character(df_clinical_ctdna$surv_recurrence)
# df_clinical_ctdna$surv_overall = as.character(df_clinical_ctdna$surv_overall)
# library(readr)
# write_tsv(df_clinical_ctdna,"test.tsv")
array_full_table_variables <- c(
'p16_status',
'sex',
'age_at_dx',
'ecog',
'stage_t_ajcc8',
'stage_n_ajcc8',
'stage_ajcc8',
'smoking_status',
'smoking_packyears',
'rt_regimen',
'local_failure',
'regional_failure',
'distant_failure',
'vital_status'
)
array_full_table_labels <- list(
p16_status ~ 'p16 status',
sex ~ 'Sex',
age_at_dx ~ 'Age at diagnosis',
ecog ~ 'ECOG Status',
stage_t_ajcc8 ~ 'T stage',
stage_n_ajcc8 ~ 'N stage',
stage_ajcc8 ~ 'Overall stage (AJCC8)',
smoking_status ~ 'Smoking status',
smoking_packyears ~ 'Smoking packyears',
rt_regimen ~ 'RT or CRT',
local_failure ~ 'Local Failure',
regional_failure ~ 'Regional Failure',
distant_failure ~ 'Distant Failure',
vital_status ~ 'Vital Status'
)
abridged_table_variables <- c('age_at_dx', 'sex', 'ecog', 'stage_t_ajcc8', 'stage_n_ajcc8', 'smoking_status')
array_abridged_table_labels <- list(
sex ~ 'Sex',
age_at_dx ~ 'Age at diagnosis',
ecog ~ 'ECOG Status',
stage_t_ajcc8 ~ 'T stage',
stage_n_ajcc8 ~ 'N stage',
smoking_status ~ 'Smoking status'
)
df_ctdna_clinical %>%
mutate(rt_regimen = factor(rt_regimen, levels = c('RT Alone', 'CRT', 'RT + EGFRI', 'RT+ IO'))) %>%
tbl_summary(
by = 'rt_regimen',
include = all_of(abridged_table_variables),
label = array_abridged_table_labels
)
val_max_eqd2 <- max(df_ctdna_eqd2$EQD2, na.rm=T)
val_max_hpv <- max(df_ctdna_eqd2$ctdna, na.rm=T)
p_hpvdna_vs_eqd2 <- df_ctdna_eqd2 %>%
ggplot(aes(
x = EQD2,
y = ctdna,
group = patient
)) +
geom_line(
color = 'Grey80',
alpha = 0.5
) +
geom_point(aes(
color = timepoint
)) +
scale_y_continuous(
trans = scales::pseudo_log_trans(sigma=0.1),
breaks = c(0, 10^(0:10)),
labels = c('Undetect.', sprintf("%.20g", c(10^(0:10))))
) +
scale_color_brewer(palette = 'Set1') +
labs(
x = 'RT dose (Gy, EQD2)',
y = 'HPV DNA level'
)
p_percent_undetectable_vs_eqd2 <- df_ctdna_eqd2 %>%
filter(!is.na(EQD2)) %>%
mutate(dose_bin = cut(EQD2, c(seq(0, max(EQD2, na.rm=T), 10), Inf), include.lowest=T)) %>%
group_by(dose_bin) %>%
summarise(
n_undetectable = sum(ctdna == 0),
n_total = n(),
percent_undetectable = n_undetectable / n_total * 100
) %>%
mutate(
bin_start = gsub('.(\\d+),.*', '\\1', dose_bin) %>% as.numeric,
bin_end = gsub('.\\d+,(.*)', '\\1', dose_bin) %>% substr(1, (nchar(.)-1)) %>% if_else(.=='Inf', as.character(val_max_eqd2), .) %>% as.numeric
) %>%
ggplot() +
geom_rect(aes(
xmin = bin_start,
xmax = bin_end,
ymin = 0,
ymax = percent_undetectable
), fill = '#ded076') +
geom_text(aes(
label = sprintf('%s%%', round(percent_undetectable, 1)),
x = bin_start,
y = percent_undetectable
), hjust = 0, nudge_y = 10) +
labs(
x = 'RT dose (Gy, EQD2)',
y = 'Percent undetectable'
)
plot_grid(
p_hpvdna_vs_eqd2 +
ggtitle('HPV DNA levels through RT') +
theme(
legend.position = 'none',
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid = element_blank(),
panel.background = element_blank()
),
p_percent_undetectable_vs_eqd2 +
theme(
panel.grid = element_blank(),
panel.background = element_blank()
),
ncol = 1,
align = 'v',
rel_heights = c(2,1)
)
plot_grid(
plotlist = plot_posterior_predictive_check(brms_gtv_model),
rel_widths = c(1,2)
)
plotdata_ctdna_radiomic_joint <- df_ctdna_eqd2_radiomic_clinical %>%
filter(timepoint == '3 months') %>%
filter(!is.na(sum_gtv_nodes), !is.na(gtv_primary), !is.na(ctdna)) %>%
filter(
patient %in% (df_ctdna_eqd2_radiomic_clinical %>% filter(timepoint == 'Baseline', ctdna > 0) %>% .$patient)
) %>%
mutate(
detectable = ctdna > 0,
Chemotherapy = rt_regimen == 'CRT',
`log(1+GTVp)` = log10(1+gtv_primary),
`log(1+GTVn)` = log10(1+sum_gtv_nodes),
`log(1+ctDNA)` = log10(1+ctdna)
)
# ---------------------------- #
# KM plot - split by clearance #
# ---------------------------- #
survfit_rfs_by_clearance <- survfit(
Surv(time_to_recurrence, recurrence) ~ clearance,
data = plotdata_ctdna_radiomic_joint
)
survplot_rfs_by_clearance <- ggsurvplot(
survfit_rfs_by_clearance,
risk.table = T,
legend.title="Clearance",
palette = 'jama',
risk.table.title='',
tables.col = 'strata',
pval = T
) +
labs(
x = 'Time (months)',
y = 'Recurrence-free survival'
)
# ------------------------------- #
# Cox analysis with detectability #
# ------------------------------- #
cox_detectability_stage <- coxph(
Surv(time_to_recurrence, recurrence) ~ clearance + `T category` + `N category`,
data = plotdata_ctdna_radiomic_joint %>%
mutate(
clearance = !detectable,
`T category` = as.integer(stage_t_ajcc8),
`N category` = as.integer(stage_n_ajcc8)
)
)
cox_detectability_gtv <- coxph(
Surv(time_to_recurrence, recurrence) ~ clearance + `log GTVp` + `log GTVn`,
data = plotdata_ctdna_radiomic_joint %>%
mutate(
clearance = !detectable,
`log GTVp` = log10(1 + gtv_primary),
`log GTVn` = log10(1 + sum_gtv_nodes)
)
)
p_cox_detectability <- forestmodel::forest_model(
model_list = list(cox_detectability_stage, cox_detectability_gtv),
show_global_p = 'bottom',
recalculate_width = 8
) +
geom_hline(yintercept = 4.5, size = 2, color = 'black')
###################
# Read ctDNA data #
###################
df_ctdna_wide <- read_csv(
'data/clinical/clinical_opc_ctdna.csv',
col_select = c('patient', 'ctdna_baseline', 'ctdna_earlyrt', 'ctdna_midrt', 'ctdna_3months')
) %>%
filter(!is.na(ctdna_baseline))
brms_models <- list(
'Lognormal model' = readRDS('data/results/brms_ctdna_eqd2_gtv_censor_m1.Rds'),
'No follow-up random effects' = readRDS('data/results/brms_ctdna_eqd2_gtv_censor_m2.Rds'),
'Weibull model' = readRDS('data/results/brms_ctdna_eqd2_gtv_censor_m3.Rds'),
'Informative priors on random effects' = readRDS('data/results/brms_ctdna_eqd2_gtv_censor_m4.Rds'),
'Follow-up delay in months' = readRDS('data/results/brms_ctdna_eqd2_gtv_censor_m5.Rds'),
'Replacing GTV with stage' = readRDS('data/results/brms_ctdna_eqd2_gtv_censor_m6.Rds')
) %>%
lapply(function(z) {add_criterion(z, 'loo')})
df_ctdna_eqd2_gtv <- df_ctdna_eqd2 %>%
left_join(
df_gtv_nodes %>% select(patient, sum_gtv_nodes),
by = 'patient'
) %>%
left_join(
df_gtv_primary %>% select(patient, gtv_primary),
by = 'patient'
) %>%
inner_join(
df_ctdna_clinical %>%
mutate(
chemotherapy = if_else(rt_regimen == 'CRT', 'Chemotherapy', 'No chemotherapy') %>% factor(levels = c('No chemotherapy', 'Chemotherapy')) %>% as.integer(),
t_category = as.integer(stage_t_ajcc8),
n_category = as.integer(stage_n_ajcc8)
) %>%
select(-surv_overall, -surv_progression, -surv_recurrence)
) %>%
filter(!patient %in% df_exclude$patient) %>%
mutate(
log_gtv_primary = log10(1+gtv_primary),
log_sum_gtv_nodes = log10(1+sum_gtv_nodes)
) %>%
filter(!is.na(log_gtv_primary), !is.na(log_sum_gtv_nodes)) %>%
mutate(
censored = if_else(ctdna == 0, 'left', 'none')
)
brms_ctdna_eqd2_gtv_censor_m1 <- brm(
ctdna | cens(censored) ~ EQD2 + chemotherapy + EQD2:chemotherapy + log_gtv_primary + EQD2:log_gtv_primary + log_sum_gtv_nodes + EQD2:log_sum_gtv_nodes + follow_up + follow_up:chemotherapy + follow_up:log_gtv_primary + follow_up:log_sum_gtv_nodes + (1 + EQD2 + follow_up | patient),
data = df_ctdna_eqd2_gtv %>%
mutate(
ctdna = if_else(ctdna == 0, with(df_ctdna_eqd2_gtv, min(ctdna[ctdna!=0])), ctdna),
follow_up = if_else(follow_up_months > 0, 1, 0)
),
family = lognormal(),
iter = 2000, warmup = 1000, chains = 4, cores = 4,
save_pars = save_pars(all = TRUE)
)
